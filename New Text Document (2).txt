Slip 26

-- It is recommended to run these commands using a PostgreSQL superuser like 'postgres'

-- 1. Create the database
-- Note: You might need to drop it first if it already exists from a previous attempt.
-- DROP DATABASE IF EXISTS slip26;
CREATE DATABASE slip26;

-- After creating the database, you need to connect to it.
-- In psql, you would use: \c slip26

-- 2. Create the 'hospital' table
-- This table is created first as the 'doctor' table will reference it.
CREATE TABLE hospital (
    hno INT PRIMARY KEY,
    hname VARCHAR(50) NOT NULL,
    hcity VARCHAR(50)
);

-- 3. Create the 'doctor' table
-- This table implements the "many" side of the many-to-one relationship.
-- The 'hsno' column is a foreign key that references the 'hno' in the hospital table.
CREATE TABLE doctor (
    doc_no INT PRIMARY KEY,
    dname VARCHAR(50) NOT NULL,
    address VARCHAR(100),
    city VARCHAR(50),
    area VARCHAR(20),  -- This corresponds to the "Pin" in the PHP output
    hsno INT,
    CONSTRAINT fk_hospital
        FOREIGN KEY(hsno)
        REFERENCES hospital(hno)
);

-- 4. Insert sample data into the tables

-- Insert data into the 'hospital' table
INSERT INTO hospital (hno, hname, hcity) VALUES
(1, 'Sahyadri Hospital', 'Pune'),
(2, 'Aditya Birla Hospital', 'Pune'),
(3, 'City General Hospital', 'Mumbai');

-- Insert data into the 'doctor' table
-- Note how multiple doctors are linked to the same hospital (e.g., hsno=1)
INSERT INTO doctor (doc_no, dname, address, city, area, hsno) VALUES
(101, 'Dr. Amit Sharma', '123 Kothrud Road', 'Pune', '411038', 1),
(102, 'Dr. Priya Singh', '456 Deccan Gymkhana', 'Pune', '411004', 1),
(103, 'Dr. Raj Verma', '789 Chinchwad', 'Pune', '411033', 2),
(104, 'Dr. Sneha Patil', '101 Nigdi', 'Pune', '411044', 2),
(105, 'Dr. Anil Kumar', '212 Bandra West', 'Mumbai', '400050', 3);

-- You can verify the data
SELECT * FROM hospital;
SELECT * FROM doctor;





Slip 29


-- It is recommended to run these commands using a PostgreSQL superuser like 'postgres'

-- 1. Create the database
-- Note: You can drop it first if it already exists from a previous run.
-- DROP DATABASE IF EXISTS practicals22;
CREATE DATABASE practicals22;

-- After creating the database, you must connect to it before creating tables.
-- In psql (the command-line tool), you would use: \c practicals22

-- 2. Create the 'event' table
CREATE TABLE event (
    eno SERIAL PRIMARY KEY,
    etitle VARCHAR(100) NOT NULL UNIQUE,
    event_date DATE
);

-- 3. Create the committee table (named 'comm_mem' as per the PHP script)
CREATE TABLE comm_mem (
    cno SERIAL PRIMARY KEY,
    cname VARCHAR(100) NOT NULL,
    chead VARCHAR(100),
    from_time TIME,
    to_time TIME,
    cstatus VARCHAR(20) DEFAULT 'Pending' -- Initial status for all committees
);

-- 4. Create the junction table 'event_comm' to handle the many-to-many relationship
CREATE TABLE event_comm (
    eno INT,
    cno INT,
    PRIMARY KEY (eno, cno), -- Composite key to ensure each pairing is unique
    FOREIGN KEY (eno) REFERENCES event(eno) ON DELETE CASCADE,
    FOREIGN KEY (cno) REFERENCES comm_mem(cno) ON DELETE CASCADE
);

-- 5. Insert sample data for testing

-- Insert some events
INSERT INTO event (etitle, event_date) VALUES
('Annual Day', '2025-12-20'),
('Sports Meet', '2026-01-15'),
('Science Fair', '2026-02-10');

-- Insert some committees
INSERT INTO comm_mem (cname, chead, from_time, to_time, cstatus) VALUES
('Stage Committee', 'Mr. Sharma', '09:00:00', '17:00:00', 'Pending'),
('Food Committee', 'Mrs. Gupta', '10:00:00', '16:00:00', 'Pending'),
('Discipline Committee', 'Mr. Khan', '08:00:00', '18:00:00', 'Pending'),
('Guest Welcome Committee', 'Ms. Davis', '09:30:00', '12:00:00', 'Pending');

-- Associate committees with events in the junction table
INSERT INTO event_comm (eno, cno) VALUES
-- Annual Day (eno=1) is handled by Stage (cno=1) and Food (cno=2) committees
(1, 1),
(1, 2),
-- Sports Meet (eno=2) is handled by Food (cno=2) and Discipline (cno=3) committees
(2, 2),
(2, 3),
-- Science Fair (eno=3) is handled by Stage (cno=1) and Guest Welcome (cno=4) committees
(3, 1),
(3, 4);

-- You can verify the initial data with these commands
-- SELECT * FROM event;
-- SELECT * FROM comm_mem;
-- SELECT * FROM event_comm;



SLip 30




-- It is recommended to run these commands using a PostgreSQL superuser like 'postgres'

-- 1. Create the database
-- Note: You might need to drop it first if it already exists from a previous run.
-- DROP DATABASE IF EXISTS slip30;
CREATE DATABASE slip30;

-- After creating the database, you must connect to it to create the tables.
-- In the psql command-line tool, you would use: \c slip30

-- 2. Create the 'student' table
-- The column is named 'id' to match the 'id=sid' condition in your PHP query.
CREATE TABLE student (
    id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    class VARCHAR(20)
);

-- 3. Create the 'competition' table
-- The column is named 'cno' to match 'competition.cno' in your PHP query.
CREATE TABLE competition (
    cno INT PRIMARY KEY,
    cname VARCHAR(100) NOT NULL UNIQUE,
    type VARCHAR(50)
);

-- 4. Create the 'stud_comp' junction table
-- This table resolves the many-to-many relationship and holds the attributes 'rank' and 'year'.
-- Column names 'sid', 'cno', and 'srank' are chosen to match your PHP query.
CREATE TABLE stud_comp (
    sid INT,
    cno INT,
    srank INT NOT NULL,
    syear INT NOT NULL,
    PRIMARY KEY (sid, cno, syear), -- A student can participate in the same competition in different years
    FOREIGN KEY (sid) REFERENCES student(id) ON DELETE CASCADE,
    FOREIGN KEY (cno) REFERENCES competition(cno) ON DELETE CASCADE
);

-- 5. Insert sample data for testing

-- Insert students
INSERT INTO student (id, name, class) VALUES
(101, 'Arjun Mehta', '12th A'),
(102, 'Priya Sharma', '11th B'),
(103, 'Rohan Joshi', '12th A'),
(104, 'Sneha Desai', '10th C');

-- Insert competitions
INSERT INTO competition (cno, cname, type) VALUES
(1, 'Debate Championship', 'Academic'),
(2, 'Science Olympiad', 'Academic'),
(3, 'Annual Chess Tournament', 'Sports');

-- Insert student participation data, including rank and year
INSERT INTO stud_comp (sid, cno, srank, syear) VALUES
-- Debate Championship results for 2024
(101, 1, 2, 2024),
(102, 1, 1, 2024), -- Priya Sharma got 1st rank in Debate
(103, 1, 3, 2024),

-- Science Olympiad results for 2024
(101, 2, 3, 2024),
(103, 2, 1, 2024), -- Rohan Joshi got 1st rank in Science Olympiad
(104, 2, 2, 2024),

-- Annual Chess Tournament results for 2024
(101, 3, 1, 2024), -- Arjun Mehta got 1st rank in Chess
(104, 3, 2, 2024);

-- You can verify the data with these commands:
-- SELECT * FROM student;
-- SELECT * FROM competition;
-- SELECT * FROM stud_comp;

























[root@localhost ~]# service httpd start
Redirecting to /bin/systemctl start httpd.service
[root@localhost ~]# service postgresql start
Redirecting to /bin/systemctl start postgresql.service
[root@localhost ~]# yum install php-pgsql
Last metadata expiration check: 19:57:43 ago on Wednesday 10 September 2025 12:47:23 PM IST.
Dependencies resolved.
================================================================================================================
 Package             Architecture     Version                                         Repository           Size
================================================================================================================
Installing:
 php-pgsql           x86_64           7.2.24-1.module_el8.2.0+313+b04d0a66            appstream           117 k

Transaction Summary
================================================================================================================
Install  1 Package

Total download size: 117 k
Installed size: 199 k
Is this ok [y/N]: y
Downloading Packages:
php-pgsql-7.2.24-1.module_el8.2.0+313+b04d0a66.x86_64.rpm                       2.1 MB/s | 117 kB     00:00    
----------------------------------------------------------------------------------------------------------------
Total                                                                           2.1 MB/s | 117 kB     00:00     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                                                        1/1 
  Installing       : php-pgsql-7.2.24-1.module_el8.2.0+313+b04d0a66.x86_64                                  1/1 
  Running scriptlet: php-pgsql-7.2.24-1.module_el8.2.0+313+b04d0a66.x86_64                                  1/1 
  Verifying        : php-pgsql-7.2.24-1.module_el8.2.0+313+b04d0a66.x86_64                                  1/1 

Installed:
  php-pgsql-7.2.24-1.module_el8.2.0+313+b04d0a66.x86_64                                                         

Complete!
[root@localhost ~]# ^C
[root@localhost ~]# sudo setsebool -P postgresql_can_newtork connect on

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# sudo setsebool -P httpd_postgresql_can_newtork connect on

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# sudo setsebool -P httpd_postgresql_can_newtork connect 1

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# sudo setsebool -P httpd_can_newtork connect 1

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# sudo setsebool -P httpd_postgresql_can_newtork connect on

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# sudo setsebool -P httpd_postgresql_can_newtork connect on

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# sudo setsebool -P httpd_can_newtork connect 1

Usage:  setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...

[root@localhost ~]# su postgres
bash-4.4$
















<?php
$con=pg_connect("host=localhost dbname=ty1 port=5432 user=postgres password=123");

$title=$_POST['t'];

$sql = "update committe set status='working' from event,event_com where event.eno=event_com.eno and committe.cno=event_com.cno and title='$title' ";
$result=pg_query($sql);
if(!$result)
  echo "not Updated";
else
  echo "updated";


$sql1 = "select title,cname,status from event,committe,event_com where event.eno=event_com.eno and committe.cno=event_com.cno and committe.status='working' and title='$title' ";
$result1=pg_query($sql1);

while($row=pg_fetch_array($result1))
{
  echo "<table border=2 align=center>";
  echo "<th>ename</th><th>cname</th><th>status</th>";
  echo "<tr>";
  echo "<td>".$row['ename']."</td>";
  echo "<td>".$row['cname']."</td>";
  echo "<td>".$row['status']."</td>";
  echo "</tr>";
  echo "</table><br>";
}
?>


















postgres=# create database event;
CREATE DATABASE
postgres=# \c event
You are now connected to database "event" as user "postgres".
event=# create table event (eno int primary key,title varchar(50),edate date);
CREATE TABLE
event=# create table committe(cno int primary key,cname varchar(30),head varchar(30),ftime time,ttime time,status varchar(20));
CREATE TABLE
event=# create table event_com(eno int references event(eno),cno int references committe(cno));
CREATE TABLE
event=# insert into event values(1,'Fresher','7/13/2025');
INSERT 0 1
event=# insert into event values(2,'Induction','6/10/2025');
INSERT 0 1
event=# insert into event values(3,'Farwell','4/2/2026');
INSERT 0 1
event=# insert into committe  values(101,'Stage','Mrs.Nilambari','8:00','2:00','pending');
INSERT 0 1
event=# insert into committe  values(102,'Registeration','Mrs.Aparajita','8:00','5:00','inprogress');
INSERT 0 1
event=# insert into committe  values(103,'Discipline','Mrs.Ingale','8:00','5:00','inprogress');
INSERT 0 1
event=# insert into event_com  values(1,101);
INSERT 0 1
event=# insert into event_com  values(1,103);
INSERT 0 1
event=# insert into event_com  values(2,103);
INSERT 0 1
event=# insert into event_com  values(2,101);
INSERT 0 1
event=# insert into event_com  values(2,102);
INSERT 0 1
event=# insert into event_com  values(3,102);
INSERT 0 1
event=# select * from event;
 eno |   title   |   edate    
-----+-----------+------------
   1 | Fresher   | 2025-07-13
   2 | Induction | 2025-06-10
   3 | Farwell   | 2026-04-02
(3 rows)













pd_hba.conf
#replication privilage
91            local  replication  all    trust

postgresql.conf

59      #listen_addresses    "*"        #what ip address(es) to listen on;

#local is for unix domain and socket connetions only
pd_hba.cong
80            local    all    trust


var/lib/pgsql/data














